{"version":3,"sources":["helpers/cookieParser.ts","helpers/requestService.ts","helpers/request.ts","helpers/truncate.ts","components/form.tsx","components/taskItem.tsx","context/userContext.ts","helpers/auth/requestService.ts","helpers/auth/request.ts","components/login.tsx","components/register.tsx","components/main.tsx","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["cookies","document","cookie","split","FetchRequest","url","options","a","fetch","res","ok","Error","data","headers","get","text","json","RequestService","fetchRequest","this","method","send","req","body","JSON","stringify","taskId","RequestClient","baseUrl","requestService","task","post","delete","id","update","filterBy","Truncate","maxLength","str","length","slice","Form","updateTasks","newTask","name","description","status","priority","handleEditTask","useState","prioritySelected","setPriority","statusSelected","setStatus","taskName","setTaskName","taskDescription","setTaskDescription","request","truncate","handlePriorityChange","handleStatusChange","handleSubmit","e","preventDefault","createTask","console","log","updateTask","getAllTasks","tasks","onSubmit","htmlFor","type","onChange","target","value","handleNameChange","defaultValue","required","cols","rows","cut","handleDescriptionChange","className","checked","TaskItem","createdAt","isEditing","setIsEditing","handleDeleteTask","deleteTask","showButtons","onClick","color","toLowerCase","priorityColor","UserContext","createContext","RequestClientAuth","process","REACT_APP_URL","user","username","password","btoa","Login","toggleShowLogin","setUsername","setPassword","loginError","setLoginError","useContext","setUser","requestAuth","login","authenticated","handlePasswordChange","Register","registerError","setRegisterError","register","Main","setTasks","showLogin","setShowLogin","useEffect","filterByStatus","filterByPriority","val","handleLogout","logout","userAuthenticated","displayLogoutBtn","map","i","renderTasks","Routes","exact","path","component","Root","App","fetchUser","useMemo","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","history","createBrowserHistory","getElementById"],"mappings":"kQAIiBA,EAJD,WACZ,OAAOC,SAASC,OAAOC,MAAM,eAAe,ICCnCC,EAAb,2HACI,WAAWC,EAAaC,GAAxB,iBAAAC,EAAA,sEACgCC,MAAMH,EAAKC,GAD3C,WACUG,EADV,QAIYC,GAJZ,mBAKuB,mDAAZD,EAAIJ,IALf,sBAMkB,IAAIM,MAAM,kCAN5B,UASuB,sDAAZF,EAAIJ,IATf,sBAUkB,IAAIM,MAAM,0BAV5B,UAcmB,oDAAZF,EAAIJ,IAdX,0CAeeO,GAff,WAkB2C,6BAApCH,EAAII,QAAQC,IAAI,gBAlBvB,kCAmBqBL,EAAIM,OAnBzB,QAmBQH,EAnBR,gDAqBqBH,EAAIO,OArBzB,QAqBQJ,EArBR,wCAwBWA,GAxBX,4CADJ,gEA6BaK,EAAb,WAGI,aAAe,yBAFPC,kBAEM,EACVC,KAAKD,aAAe,IAAId,EAJhC,8EAOI,WAAUC,EAAae,EAAgBP,GAAvC,iBAAAN,EAAA,6DACUD,EAAe,IACbc,OAASA,EACjBd,EAAQO,QAAUA,EAHtB,SAIsBM,KAAKD,aAAaG,KAAKhB,EAAKC,GAJlD,cAIUgB,EAJV,yBAMWA,GANX,gDAPJ,oHAgBI,WAAWjB,EAAae,EAAgBP,EAAcU,GAAtD,iBAAAhB,EAAA,6DACUD,EAAe,IACbc,OAASA,EACjBd,EAAQiB,KAAOC,KAAKC,UAAUF,GAC9BjB,EAAQO,QAAUA,EAJtB,SAKsBM,KAAKD,aAAaG,KAAKhB,EAAKC,GALlD,cAKUgB,EALV,yBAOWA,GAPX,gDAhBJ,wHA0BI,WAAajB,EAAae,EAAgBP,EAAca,GAAxD,iBAAAnB,EAAA,6DACUD,EAAe,IACbc,OAASA,EACjBd,EAAQO,QAAUA,EAHtB,SAIsBM,KAAKD,aAAaG,KAAlB,UAA0BhB,EAA1B,mBAAwCqB,GAAUpB,GAJxE,cAIUgB,EAJV,yBAMWA,GANX,gDA1BJ,wHAmCI,WAAajB,EAAae,EAAgBP,EAAcU,GAAxD,iBAAAhB,EAAA,6DACUD,EAAe,IACbc,OAASA,EACjBd,EAAQiB,KAAOC,KAAKC,UAAUF,GAC9BjB,EAAQO,QAAUA,EAJtB,SAKsBM,KAAKD,aAAaG,KAAKhB,EAAKC,GALlD,cAKUgB,EALV,yBAOWA,GAPX,gDAnCJ,oEC3BaK,EAAb,WAQI,aAAe,yBAPPC,QAOM,qBANNf,QAAU,CACd,eAAgB,mBAChB,eAAgBb,KAIN,KAFN6B,oBAEM,EACVV,KAAKU,eAAiB,IAAIZ,EATlC,sFAYI,sBAAAV,EAAA,+EACWY,KAAKU,eAAef,IACvBK,KAAKS,QACL,MACAT,KAAKN,UAJb,gDAZJ,qHAoBI,WAAiBiB,GAAjB,SAAAvB,EAAA,+EACWY,KAAKU,eAAeE,KACvBZ,KAAKS,QACL,OACAT,KAAKN,QACLiB,IALR,gDApBJ,sHA6BI,WAAiBJ,GAAjB,SAAAnB,EAAA,+EACWY,KAAKU,eAAeG,OACvBb,KAAKS,QACL,SACAT,KAAKN,QACLa,IALR,gDA7BJ,sHAsCI,WAAiBO,EAAYH,GAA7B,SAAAvB,EAAA,+EACWY,KAAKU,eAAeK,OAApB,UACAf,KAAKS,QADL,mBACuBK,GAC1B,MACAd,KAAKN,QACLiB,IALR,gDAtCJ,4HA+CI,WAAqBK,GAArB,SAAA5B,EAAA,+EACWY,KAAKU,eAAef,IAApB,UACAK,KAAKS,QADL,iCACqCO,GACxC,MACAhB,KAAKN,UAJb,gDA/CJ,4HAuDI,WAAuBsB,GAAvB,SAAA5B,EAAA,+EACWY,KAAKU,eAAef,IAApB,UACAK,KAAKS,QADL,qCACyCO,GAC5C,MACAhB,KAAKN,UAJb,gDAvDJ,8DCaeuB,E,WAdX,WAAYC,GAAoB,yBAFxBA,eAEuB,EAC3BlB,KAAKkB,UAAYA,E,uCAGrB,SAAItB,GACA,IAAIuB,EAAMvB,EAKV,OAHGA,EAAKwB,QAAUpB,KAAKkB,YACnBC,EAAMvB,EAAKyB,MAAM,EAAGrB,KAAKkB,YAEtBC,M,YCyKAG,EAtK4B,SAAC,GAAuF,IAArFC,EAAoF,EAApFA,YAAaC,EAAuE,EAAvEA,QAASV,EAA8D,EAA9DA,GAAIW,EAA0D,EAA1DA,KAAMC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eAAqB,EACtFC,mBAAiBF,GAAsB,OAD+C,mBACvHG,EADuH,KACrGC,EADqG,OAE1FF,mBAAiBH,GAAoB,cAFqD,mBAEvHM,EAFuH,KAEvGC,EAFuG,OAG9FJ,mBAAiBL,GAH6E,mBAGvHU,EAHuH,KAG7GC,EAH6G,OAIhFN,mBAAiBJ,GAAyB,IAJsC,mBAIvHW,EAJuH,KAItGC,EAJsG,KAKxHC,EAAU,IAAI/B,EACdgC,EAAW,IAAIvB,EAAS,KAExBwB,EAAuB,SAACb,GAC1BI,EAAYJ,IAGVc,EAAqB,SAACf,GACxBO,EAAUP,IAaRgB,EAAY,uCAAG,WAAOC,GAAP,mBAAAxD,EAAA,yDACjBwD,EAAEC,iBAGIzC,EAAO,CACTqB,KAAMU,EACNT,YAAaW,EACbT,SAAUG,EACVJ,OAAQM,IAGRT,EAXa,0CAaGe,EAAQO,WAAW1C,GAbtB,OAaTd,EAbS,OAcTiC,EAAYjC,GAdH,kDAgBTyD,QAAQC,IAAR,MAhBS,iDA4BPT,EAAQU,WAAWnC,EAAcV,GA5B1B,yBA6BOmC,EAAQW,cA7Bf,QA6BPC,EA7BO,OA8Bb5B,EAAY4B,GAERtB,GACAA,IAjCS,0DAAH,sDAsClB,OAAO,uBAAMuB,SAAUT,EAAhB,UACH,gCACI,6BAAKnB,EAAU,WAAa,cAC5B,8BACI,uBAAO6B,QAAQ,OAAf,SAAsB,8CAE1B,uBACIC,KAAK,OACLxC,GAAG,OACHW,KAAK,OACL8B,SAAU,SAACX,GAAD,OA1DG,SAACA,GACtB,IAAMnB,EAAOmB,EAAEY,OAAOC,MACtBrB,EAAYX,GAwDaiC,CAAiBd,IAClCe,aAAenC,EAAiB,GAAPC,EACzBmC,UAAQ,OAGhB,gCACI,8BACI,uBAAOP,QAAQ,cAAf,SAA6B,qDAEjC,0BACIQ,KAAM,GACNC,KAAM,EACNhD,GAAG,cACHW,KAAK,cACL8B,SAAU,SAACX,GAAD,OAnEU,SAACA,GAC7B,IAAMlB,EAAckB,EAAEY,OAAOC,MAC7BnB,EAAmBE,EAASuB,IAAIrC,IAiEPsC,CAAwBpB,IACzCa,MAAOpB,EACPuB,UAAQ,IAEZ,oBAAGK,UAAU,mBAAb,UAAiC5B,EAAgBjB,OAAjD,aAEJ,sBAAK6C,UAAU,oBAAf,UACI,sBAAKA,UAAU,qBAAf,UACI,8BACI,4BAAG,kDAEP,uBAAOZ,QAAQ,MAAf,iBACA,uBACIC,KAAK,QACLxC,GAAG,MACHW,KAAK,WACLgC,MAAM,MACNF,SAAU,kBAAMd,EAAqB,QACrCyB,QAA8B,QAArBnC,IAEb,uBAAOsB,QAAQ,SAAf,oBACA,uBACIC,KAAK,QACLxC,GAAG,SACHW,KAAK,WACLgC,MAAM,SACNF,SAAU,kBAAMd,EAAqB,WACrCyB,QAA8B,WAArBnC,IAEb,uBAAOsB,QAAQ,OAAf,kBACA,uBACIC,KAAK,QACLxC,GAAG,OACHW,KAAK,WACLgC,MAAM,OACNF,SAAU,kBAAMd,EAAqB,SACrCyB,QAA8B,SAArBnC,OAGjB,sBAAKkC,UAAU,mBAAf,UACI,8BACI,8BAAG,4CAAH,SAEJ,uBAAOZ,QAAQ,aAAf,wBACA,uBACIC,KAAK,QACLxC,GAAG,aACHW,KAAK,SACLgC,MAAM,aACNF,SAAU,kBAAMb,EAAmB,eACnCwB,QAA4B,eAAnBjC,IAEb,uBAAOoB,QAAQ,SAAf,qBACA,uBACIC,KAAK,QACLxC,GAAG,SACHW,KAAK,SACLgC,MAAM,SACNF,SAAU,kBAAMb,EAAmB,WACnCwB,QAA4B,WAAnBjC,IAEb,uBAAOoB,QAAQ,WAAf,sBACA,uBACIC,KAAK,QACLxC,GAAG,WACHW,KAAK,SACLgC,MAAM,WACNF,SAAU,kBAAMb,EAAmB,aACnCwB,QAA4B,aAAnBjC,UAIrB,8BACI,uBAAOqB,KAAK,SAASG,MAAOjC,EAAU,SAAW,eChF9C2C,EAlFoC,SAAC,GAAyE,IAAvErD,EAAsE,EAAtEA,GAAIW,EAAkE,EAAlEA,KAAMC,EAA4D,EAA5DA,YAAaE,EAA+C,EAA/CA,SAAUD,EAAqC,EAArCA,OAAQyC,EAA6B,EAA7BA,UAAW7C,EAAkB,EAAlBA,YAAkB,EACtFO,oBAAkB,GADoE,mBACjHuC,EADiH,KACtGC,EADsG,KAElH/B,EAAU,IAAI/B,EAEdqB,EAAiB,WACnByC,GAAcD,IAIZE,EAAgB,uCAAG,WAAOzD,GAAP,eAAA1B,EAAA,sEACDmD,EAAQiC,WAAW1D,GADlB,OACfqC,EADe,OAErB5B,EAAY4B,GAFS,2CAAH,sDAKhBsB,EAAc,WAChB,OAAOJ,EACH,sBAAMJ,UAAU,WAAWS,QAAS,kBAAM7C,KAA1C,oBACA,sBAAMoC,UAAU,WAAWS,QAAS,kBAAM7C,KAA1C,mBAyBR,OAAOwC,EACH,sBAAKJ,UAAU,OAAf,UACI,cAAC,EAAD,CACIzC,SAAS,EACTV,GAAIA,EACJW,KAAMA,EACNC,YAAaA,EACbE,SAAUA,EACVD,OAAQA,EACRJ,YAAaA,EACbM,eAAgBA,IAEnB4C,OAGL,qBAAIR,UAAU,iBAAd,UACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAS,oCAvCJ,WAClB,IAAIU,EAAQ,GACZ,OAAQ/C,EAASgD,eACb,IAAK,MACDD,EAAQ,QACR,MAEJ,IAAK,SACDA,EAAQ,SACR,MAEJ,IAAK,OACDA,EAAQ,MACR,MAEJ,QACIA,EAAQ,GAGhB,OAAOA,EAoB8CE,MAC7C,sBAAKZ,UAAS,YAAd,UACI,6BAAKxC,IACL,8BACI,4BAAIC,YAIhB,sBAAKuC,UAAU,qBAAf,UACI,gCACI,gCAAQrC,IACR,gCAAQD,IACR,gCAAQyC,OAEZ,gCACI,sBAAMH,UAAU,WAAWS,QAAS,kBAAMH,EAAiBzD,IAA3D,oBADJ,SAEK2D,cCvFRK,EAAcC,wBAAc,M,QCA5BjF,EAAb,WAII,aAAe,yBAFPC,kBAEM,EACVC,KAAKD,aAAe,IAAId,EALhC,8EAQI,WAAUC,EAAae,EAAgBP,GAAvC,iBAAAN,EAAA,6DACUD,EAAe,IACbc,OAASA,EACjBd,EAAQO,QAAUA,EAHtB,SAIsBM,KAAKD,aAAaG,KAAKhB,EAAKC,GAJlD,cAIUgB,EAJV,yBAMWA,GANX,gDARJ,oHAiBI,WAAWjB,EAAae,EAAgBP,EAAcU,GAAtD,iBAAAhB,EAAA,6DACUD,EAAe,IACbc,OAASA,EACjBd,EAAQiB,KAAOA,EAAOC,KAAKC,UAAUF,GAAQ,GAC7CjB,EAAQO,QAAUA,EAJtB,SAKsBM,KAAKD,aAAaG,KAAKhB,EAAKC,GALlD,cAKUgB,EALV,yBAOWA,GAPX,gDAjBJ,oECCa6E,EAAb,WAUI,aAAe,yBATPvE,QAAUwE,mIAAYC,cAShB,KARNxF,QAAe,CACnB,eAAgB,mBAChB,eAAgBb,IAChB,mBAAoB,kBAKV,KAFN6B,oBAEM,EACVV,KAAKU,eAAiB,IAAIZ,EAXlC,mFAcI,WAAeqF,GAAf,SAAA/F,EAAA,+EACWY,KAAKU,eAAeE,KAApB,YAEH,OACAZ,KAAKN,QACLyF,IALR,gDAdJ,iHAuBI,WAAYC,EAAkBC,GAA9B,SAAAjG,EAAA,6DACIY,KAAKN,QAAL,2BACOM,KAAKN,SADZ,IAEI,cAAgB,SAAhB,OAA0B4F,KAAK,GAAD,OAAIF,EAAJ,YAAgBC,OAHtD,kBAMWrF,KAAKU,eAAef,IAApB,SAEH,MACAK,KAAKN,UATb,gDAvBJ,oHAoCI,sBAAAN,EAAA,+EACWY,KAAKU,eAAeE,KAApB,UAEH,OACAZ,KAAKN,UAJb,gDApCJ,6DCuEe6F,EAnEyB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAAsB,EAC7B1D,mBAAiB,IADY,mBACtDsD,EADsD,KAC5CK,EAD4C,OAE7B3D,mBAAiB,IAFY,mBAEtDuD,EAFsD,KAE5CK,EAF4C,OAGzB5D,oBAAkB,GAHO,mBAGtD6D,EAHsD,KAG1CC,EAH0C,OAKnCC,qBAAWf,GAAvBgB,GAL+C,EAKrDX,KALqD,EAK/CW,SACRC,EAAc,IAAIf,EAUlBrC,EAAY,uCAAG,WAAOC,GAAP,eAAAxD,EAAA,6DACjBwD,EAAEC,iBADe,kBAIKkD,EAAYC,MAAMZ,EAAUC,GAJjC,OAMF,WAFL/F,EAJO,SAOTwG,EAAQ,CAAEG,cAAe3G,IAPhB,gDAUbyD,QAAQC,IAAR,MACA4C,GAAc,GAXD,yDAAH,sDAelB,OACI,8BACI,uBAAMxC,SAAUT,EAAhB,UACI,gCACI,uCACA,8BACI,uBAAOU,QAAQ,OAAf,SAAsB,8CAE1B,uBACIC,KAAK,OACLxC,GAAG,OACHW,KAAK,OACL8B,SAAU,SAACX,GAAD,OAnCL,SAACA,GACtB6C,EAAY7C,EAAEY,OAAOC,OAkCYC,CAAiBd,IAClCgB,UAAQ,OAGhB,8BACI,uBAAOP,QAAQ,WAAf,SAA0B,kDAE9B,uBACIC,KAAK,WACLxC,GAAG,WACHW,KAAK,WACL8B,SAAU,SAACX,GAAD,OA1CG,SAACA,GAC1B8C,EAAY9C,EAAEY,OAAOC,OAyCQyC,CAAqBtD,IACtCgB,UAAQ,IAEZ,8BACI,uBAAON,KAAK,SAASG,MAAM,YAE/B,gCAAQkC,GAAc,mCACtB,wBAAO1B,UAAU,sBAAjB,oCAA8D,sBAAMS,QAAS,kBAAMc,GAAgB,IAArC,+BCW/DW,EAxE4B,SAAC,GAAyB,IAAvBX,EAAsB,EAAtBA,gBAAsB,EAChC1D,mBAAiB,IADe,mBACzDsD,EADyD,KAC/CK,EAD+C,OAEhC3D,mBAAiB,IAFe,mBAEzDuD,EAFyD,KAE/CK,EAF+C,OAGtB5D,mBAAiB,IAHK,mBAGzDsE,EAHyD,KAG1CC,EAH0C,KAI1D9D,EAAU,IAAIyC,EAUdrC,EAAY,uCAAG,WAAOC,GAAP,eAAAxD,EAAA,6DACjBwD,EAAEC,iBAEIzC,EAAc,CAChBgF,WACAC,YALa,kBASK9C,EAAQ+D,SAASlG,GATtB,cAUbiG,EAAiB,2CAVJ,gDAYbtD,QAAQC,IAAR,MACAqD,EAAiB,0BAbJ,yDAAH,sDAsBlB,OACI,8BACI,uBAAMjD,SAAUT,EAAhB,UACI,gCACI,0CACA,8BACI,uBAAOU,QAAQ,OAAf,SAAsB,8CAE1B,uBACIC,KAAK,OACLxC,GAAG,OACHW,KAAK,OACL8B,SAAU,SAACX,GAAD,OA1CL,SAACA,GACtB6C,EAAY7C,EAAEY,OAAOC,OAyCYC,CAAiBd,IAClCgB,UAAQ,OAGhB,8BACI,uBAAOP,QAAQ,WAAf,SAA0B,kDAE9B,uBACIC,KAAK,WACLxC,GAAG,WACHW,KAAK,WACL8B,SAAU,SAACX,GAAD,OAjDG,SAACA,GAC1B8C,EAAY9C,EAAEY,OAAOC,OAgDQyC,CAAqBtD,IACtCgB,UAAQ,IAEZ,8BACI,uBAAON,KAAK,SAASG,MAAM,eAE/B,gCAAQ2C,GAAiBA,IACzB,wBAAOnC,UAAU,sBAAjB,sCAAgE,sBAAMS,QAAS,kBAAMc,GAAgB,IAArC,4BC2FjEe,MA3Jf,WAAiB,IAAD,EAEczE,mBAAiB,IAF/B,mBAELqB,EAFK,KAEEqD,EAFF,OAG4B1E,mBAAiB,IAH7C,mBAGLC,EAHK,KAGaC,EAHb,OAIwBF,mBAAiB,IAJzC,mBAILG,EAJK,KAIWC,EAJX,OAKsBJ,oBAAkB,GALxC,mBAKL2E,EALK,KAKMC,EALN,KAMNnE,EAAU,IAAI/B,EACduF,EAAc,IAAIf,EAPZ,EASca,qBAAWf,GAA7BK,EATI,EASJA,KAAMW,EATF,EASEA,QAEda,qBAAU,YACY,uCAAG,4BAAAvH,EAAA,sEACGmD,EAAQW,cADX,OACXC,EADW,OAEjBqD,EAASrD,GAFQ,2CAAH,qDAKlBpD,KACD,IAEH,IAaMwB,EAAc,SAAC4B,GACjBqD,EAASrD,IAGPT,EAAkB,uCAAG,WAAOE,GAAP,iBAAAxD,EAAA,yDACvB4C,EAAY,IACZE,EAAUU,EAAEY,OAAOC,OAEdb,EAAEY,OAAOC,MAJS,gCAKClB,EAAQW,cALT,cAKbC,EALa,OAMnBqD,EAASrD,GANU,2CAUHZ,EAAQqE,eAAehE,EAAEY,OAAOC,OAV7B,QAUjBN,EAViB,OAWvB5B,EAAY4B,GAXW,4CAAH,sDAclBV,EAAoB,uCAAG,WAAOG,GAAP,iBAAAxD,EAAA,yDACzB8C,EAAU,IACVF,EAAYY,EAAEY,OAAOC,OAEhBb,EAAEY,OAAOC,MAJW,gCAKDlB,EAAQW,cALP,cAKfC,EALe,OAMrBqD,EAASrD,GANY,2CAULZ,EAAQsE,iBAAiBjE,EAAEY,OAAOC,OAV7B,QAUnBN,EAVmB,OAWzB5B,EAAY4B,GAXa,4CAAH,sDAcpBqC,EAAkB,SAACsB,GACrBJ,EAAaI,IAeXC,EAAY,uCAAG,sBAAA3H,EAAA,sEACX2G,EAAYiB,SADD,OAEjBlB,EAAQ,CAAEG,eAAe,IAFR,2CAAH,qDAMZgB,EAAqB9B,EAAKc,cAGxB,qBAAKhC,UAAU,OAAf,SACI,cAAC,EAAD,CACIzC,SAAS,EACTD,YAAaA,MAvBrBkF,EACO,cAAC,EAAD,CACHjB,gBAAiBA,IAGd,cAAC,EAAD,CACHA,gBAAiBA,IAsBvB0B,EAAmB/B,EAAKc,eAC1B,qCACI,0CAAad,EAAKc,cAAlB,UACA,wBAAQvB,QAASqC,EAAjB,uBAIR,OACI,qBAAK9C,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,UAAf,UACI,8BACI,2CAAcd,EAAM/B,YAExB,gCACI,uBAAOiC,QAAQ,WAAf,uBACA,yBACI5B,KAAK,WACLX,GAAG,WACHyC,SAAU,SAACX,GAAD,OAAOH,EAAqBG,IACtCa,MAAO1B,EAJX,UAMI,wBAAQ0B,MAAM,KACd,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,wBAGR,gCACI,uBAAOJ,QAAQ,SAAf,qBACA,yBACI5B,KAAK,SACLX,GAAG,SACHyC,SAAU,SAACX,GAAD,OAAOF,EAAmBE,IACpCa,MAAOxB,EAJX,UAMI,wBAAQwB,MAAM,KACd,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,WAAd,+BAIZ,6BACKN,EAAMgE,KAAI,SAACxG,EAAMyG,GAAP,OA3HX,SAACzG,EAAYyG,GAC7B,OAAO,cAAC,EAAD,CAEHtG,GAAIH,EAAKG,GACTW,KAAMd,EAAKc,KACXC,YAAaf,EAAKe,YAClBE,SAAUjB,EAAKiB,SACfD,OAAQhB,EAAKgB,OACbyC,UAAWzD,EAAKyD,UAChB7C,YAAaA,GAPR6F,GAyH+BC,CAAY1G,EAAMyG,WAGlD,sBAAKnD,UAAU,YAAf,UACKiD,EACAD,WClJNK,EALX,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,MCkC1BC,MAnCf,WACEhB,qBAAU,WACR5D,QAAQC,IAAI,SACG,uCAAG,4BAAA5D,EAAA,sEACEC,MAAM,QAAS,CAC/BK,QAAS,CACP,eAAgB,mBAChB,eAAgBb,IAChB,mBAAoB,oBALR,cACVS,EADU,gBASGA,EAAIM,OATP,OAWH,kBAXG,QAYdkG,EAAQ,CAAEG,eAAe,IAZX,2CAAH,oDAiBf2B,KACC,IArBU,MAsBW9F,mBAAS,CAAEmE,eAAe,IAtBrC,mBAsBNd,EAtBM,KAsBAW,EAtBA,KAuBPrC,EAAQoE,mBAAQ,iBAAO,CAAE1C,OAAMW,aAAY,CAACX,EAAMW,IAExD,OACE,qBAAK7B,UAAU,MAAf,SAEE,cAACa,EAAYgD,SAAb,CAAsBrE,MAAOA,EAA7B,SACG6D,OCtBMS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAQC,QAASC,cAAjB,SACE,cAAC,EAAD,QAGJ9J,SAAS+J,eAAe,SAO1Bd,M","file":"static/js/main.ecc2465e.chunk.js","sourcesContent":["const cookies = () => {\n    return document.cookie.split(\"XSRF-TOKEN=\")[1];\n  }\n\n  export default cookies;\n","import { Task } from \"../interfaces/ITask\";\n\nexport class FetchRequest {\n    async send(url: string, options: any) {\n        const res: Response = await fetch(url, options);\n        let data;\n\n        if(!res.ok) {\n            if(res.url === \"https://morning-crag-91614.herokuapp.com/login\") {\n                throw new Error(\"Incorrect username or password\");\n            }\n\n            if(res.url === \"https://morning-crag-91614.herokuapp.com/register\") {\n                throw new Error(\"Username already taken\");\n            }\n        } \n\n        if(res.url === \"https://morning-crag-91614.herokuapp.com/logout\") {\n            return data;\n        }\n\n        if(res.headers.get(\"content-type\") === \"text/plain;charset=UTF-8\") {\n            data = await res.text();\n        } else {\n            data = await res.json();\n        }\n        \n        return data;\n    }\n}\n\nexport class RequestService {\n    private fetchRequest;\n\n    constructor() {\n        this.fetchRequest = new FetchRequest();\n    }\n\n    async get(url: string, method: string, headers: any): Promise<Task[]> {\n        const options: any = {};\n        options.method = method;\n        options.headers = headers;\n        const req = await this.fetchRequest.send(url, options);\n\n        return req;\n    }\n\n    async post(url: string, method: string, headers: any, body: Task): Promise<Task[]> {\n        const options: any = {};\n        options.method = method;\n        options.body = JSON.stringify(body);\n        options.headers = headers;\n        const req = await this.fetchRequest.send(url, options);\n\n        return req;\n    }\n\n    async delete(url: string, method: string, headers: any, taskId: number): Promise<Task[]> {\n        const options: any = {};\n        options.method = method;\n        options.headers = headers;\n        const req = await this.fetchRequest.send(`${url}/delete/${taskId}`, options);\n\n        return req;\n    }\n\n    async update(url: string, method: string, headers: any, body: Task): Promise<Task[]> {\n        const options: any = {};\n        options.method = method;\n        options.body = JSON.stringify(body);\n        options.headers = headers;\n        const req = await this.fetchRequest.send(url, options);\n\n        return req;\n    }\n}","import { Task } from \"../interfaces/ITask\";\nimport cookies from \"./cookieParser\";\nimport { RequestService } from \"./requestService\";\n\nexport class RequestClient {\n    private baseUrl = `/api/v1/tasks`;\n    private headers = {\n        'Content-Type': 'application/json',\n        'X-XSRF-TOKEN': cookies()\n    }\n    private requestService;\n\n    constructor() {\n        this.requestService = new RequestService();\n    }\n\n    async getAllTasks(): Promise<Task[]> {\n        return this.requestService.get(\n            this.baseUrl, \n            \"GET\", \n            this.headers\n        );\n    }\n\n    async createTask(task: Task): Promise<Task[]> {\n        return this.requestService.post(\n            this.baseUrl, \n            \"POST\", \n            this.headers,\n            task\n        );\n    }\n\n    async deleteTask(taskId: number): Promise<Task[]> {\n        return this.requestService.delete(\n            this.baseUrl, \n            \"DELETE\", \n            this.headers,\n            taskId\n        );\n    }\n\n    async updateTask(id: number, task: Task): Promise<Task[]> {\n        return this.requestService.update(\n            `${this.baseUrl}/update/${id}`, \n            \"PUT\", \n            this.headers,\n            task\n        );\n    }\n\n    async filterByStatus(filterBy: string): Promise<Task[]> {\n        return this.requestService.get(\n            `${this.baseUrl}/filter/status?status=${filterBy}`, \n            \"GET\", \n            this.headers\n        );\n    }\n\n    async filterByPriority(filterBy: string): Promise<Task[]> {\n        return this.requestService.get(\n            `${this.baseUrl}/filter/priority?priority=${filterBy}`, \n            \"GET\", \n            this.headers\n        );\n    }\n}\n","class Truncate {\n    private maxLength: number;\n\n    constructor(maxLength: number) {\n        this.maxLength = maxLength;\n    }\n\n    cut(text: string): string {\n        let str = text;\n\n        if(text.length >= this.maxLength) {\n            str = text.slice(0, this.maxLength);\n        }\n        return str;\n    }\n}\n\nexport default Truncate;","import React, { FunctionComponent, useState } from 'react';\nimport { RequestClient } from '../helpers/request';\nimport Truncate from '../helpers/truncate';\nimport { Task } from '../interfaces/ITask';\n\ninterface FormProps {\n    newTask: boolean;\n    id?: number;\n    name?: string;\n    description?: string;\n    status?: string;\n    priority?: string;\n    updateTasks: (tasks: Task[]) => void;\n    handleEditTask?: () => void;\n}\n\nconst Form: FunctionComponent<FormProps> = ({ updateTasks, newTask, id, name, description, status, priority, handleEditTask }) => {\n    const [prioritySelected, setPriority] = useState<string>(priority as string || \"Low\");\n    const [statusSelected, setStatus] = useState<string>(status as string || \"Incomplete\");\n    const [taskName, setTaskName] = useState<string>(name as string);\n    const [taskDescription, setTaskDescription] = useState<string>(description as string || \"\");\n    const request = new RequestClient();\n    const truncate = new Truncate(250);\n\n    const handlePriorityChange = (priority: string) => {\n        setPriority(priority);\n    }\n\n    const handleStatusChange = (status: string) => {\n        setStatus(status);\n    }\n\n    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const name = e.target.value;\n        setTaskName(name);\n    }\n\n    const handleDescriptionChange = (e: any) => {\n        const description = e.target.value;\n        setTaskDescription(truncate.cut(description));\n    }\n\n    const handleSubmit = async (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        let res;\n\n        const body = {\n            name: taskName,\n            description: taskDescription,\n            priority: prioritySelected,\n            status: statusSelected\n        }\n\n        if (newTask) {\n            try {\n                res = await request.createTask(body);\n                updateTasks(res);\n            } catch (e) {\n                console.log(e);\n            }\n\n            if (handleEditTask) {\n                try {\n\n                } catch (e) {\n                    handleEditTask();\n                }\n            }\n\n        } else {\n            await request.updateTask(id as number, body);\n            const tasks = await request.getAllTasks();\n            updateTasks(tasks);\n\n            if (handleEditTask) {\n                handleEditTask();\n            }\n        }\n    }\n\n    return <form onSubmit={handleSubmit}>\n        <div>\n            <h4>{newTask ? 'Add Task' : 'Edit Task'}</h4>\n            <div>\n                <label htmlFor=\"name\"><strong>Name</strong></label>\n            </div>\n            <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                onChange={(e) => handleNameChange(e)}\n                defaultValue={!newTask ? name : \"\"}\n                required\n            />\n        </div>\n        <div>\n            <div>\n                <label htmlFor=\"description\"><strong>Description</strong></label>\n            </div>\n            <textarea\n                cols={20}\n                rows={5}\n                id=\"description\"\n                name=\"description\"\n                onChange={(e) => handleDescriptionChange(e)}\n                value={taskDescription}\n                required\n            />\n            <p className=\"length-indicator\">{taskDescription.length}/100</p>\n        </div>\n        <div className=\"form-group-inline\">\n            <div className=\"form-task-priority\">\n                <div>\n                    <p><strong>Priority</strong></p>\n                </div>\n                <label htmlFor=\"low\">Low</label>\n                <input\n                    type=\"radio\"\n                    id=\"low\"\n                    name=\"priority\"\n                    value=\"Low\"\n                    onChange={() => handlePriorityChange(\"Low\")}\n                    checked={prioritySelected === \"Low\"}\n                />\n                <label htmlFor=\"medium\">Medium</label>\n                <input\n                    type=\"radio\"\n                    id=\"medium\"\n                    name=\"priority\"\n                    value=\"Medium\"\n                    onChange={() => handlePriorityChange(\"Medium\")}\n                    checked={prioritySelected === \"Medium\"}\n                />\n                <label htmlFor=\"high\">High</label>\n                <input\n                    type=\"radio\"\n                    id=\"high\"\n                    name=\"priority\"\n                    value=\"High\"\n                    onChange={() => handlePriorityChange(\"High\")}\n                    checked={prioritySelected === \"High\"}\n                />\n            </div>\n            <div className=\"form-task-status\">\n                <div>\n                    <p><strong>Status</strong> </p>\n                </div>\n                <label htmlFor=\"incomplete\">Incomplete</label>\n                <input\n                    type=\"radio\"\n                    id=\"incomplete\"\n                    name=\"status\"\n                    value=\"Incomplete\"\n                    onChange={() => handleStatusChange(\"Incomplete\")}\n                    checked={statusSelected === \"Incomplete\"}\n                />\n                <label htmlFor=\"active\">Active </label>\n                <input\n                    type=\"radio\"\n                    id=\"active\"\n                    name=\"status\"\n                    value=\"Active\"\n                    onChange={() => handleStatusChange(\"Active\")}\n                    checked={statusSelected === \"Active\"}\n                />\n                <label htmlFor=\"complete\">Complete</label>\n                <input\n                    type=\"radio\"\n                    id=\"complete\"\n                    name=\"status\"\n                    value=\"Complete\"\n                    onChange={() => handleStatusChange(\"Complete\")}\n                    checked={statusSelected === \"Complete\"}\n                />\n            </div>\n        </div>\n        <div>\n            <input type=\"submit\" value={newTask ? \"Submit\" : \"Save\"} />\n        </div>\n    </form>\n}\n\nexport default Form;","import React, { FunctionComponent, useState } from 'react';\nimport { RequestClient } from '../helpers/request';\nimport { Task } from '../interfaces/ITask';\nimport Form from './form';\n\ninterface TaskItemProps {\n    id: number;\n    name: string;\n    description: string;\n    priority: string;\n    status: string;\n    createdAt: string;\n    updateTasks: (tasks: Task[]) => void;\n}\n\nconst TaskItem: FunctionComponent<TaskItemProps> = ({ id, name, description, priority, status, createdAt, updateTasks }) => {\n    const [isEditing, setIsEditing] = useState<boolean>(false);\n    const request = new RequestClient();\n\n    const handleEditTask = () => {\n        setIsEditing(!isEditing);\n\n    }\n\n    const handleDeleteTask = async (id: number) => {\n        const tasks = await request.deleteTask(id);\n        updateTasks(tasks);\n    }\n\n    const showButtons = () => {\n        return isEditing ?\n            <span className=\"task-btn\" onClick={() => handleEditTask()}>Cancel</span> :\n            <span className=\"task-btn\" onClick={() => handleEditTask()}>Edit</span>;\n    }\n\n    const priorityColor = (): String => {\n        let color = \"\";\n        switch (priority.toLowerCase()) {\n            case \"low\":\n                color = \"green\";\n                break;\n\n            case \"medium\":\n                color = \"orange\";\n                break;\n\n            case \"high\":\n                color = \"red\";\n                break;\n\n            default:\n                color = \"\";\n        }\n\n        return color;\n    }\n\n    return isEditing ? (\n        <div className=\"form\">\n            <Form\n                newTask={false}\n                id={id}\n                name={name}\n                description={description}\n                priority={priority}\n                status={status}\n                updateTasks={updateTasks}\n                handleEditTask={handleEditTask}\n            />\n            {showButtons()}\n        </div>\n    ) : (\n        <li className=\"list-item-wrap\">\n            <div className=\"list-item\">\n                <div className={`list-card-bg list-card-bg-${priorityColor()}`}></div>\n                <div className={`list-card`}>\n                    <h2>{name}</h2>\n                    <div>\n                        <p>{description}</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\" list-card-details\">\n                <div>\n                    <small>{priority}</small>\n                    <small>{status}</small>\n                    <small>{createdAt}</small>\n                </div>\n                <div>\n                    <span className=\"task-btn\" onClick={() => handleDeleteTask(id)}>Delete</span> /&nbsp; \n                    {showButtons()}\n                </div>\n            </div>\n        </li>\n    )\n}\n\nexport default TaskItem;","import { createContext } from \"react\";\n\n// @ts-ignore\nexport const UserContext = createContext(null);","import { IUser } from \"../../interfaces/IUser\";\nimport { FetchRequest } from \"../requestService\";\n\nexport class RequestService {\n\n    private fetchRequest;\n\n    constructor() {\n        this.fetchRequest = new FetchRequest();\n    }\n\n    async get(url: string, method: string, headers: any): Promise<string> {\n        const options: any = {};\n        options.method = method;\n        options.headers = headers;\n        const req = await this.fetchRequest.send(url, options);\n\n        return req;\n    }\n\n    async post(url: string, method: string, headers: any, body?: IUser): Promise<string | unknown> {\n        const options: any = {};\n        options.method = method;\n        options.body = body ? JSON.stringify(body) : {};\n        options.headers = headers;\n        const req = await this.fetchRequest.send(url, options);\n\n        return req;\n    }\n}","import { IUser } from \"../../interfaces/IUser\";\nimport cookies from \"../cookieParser\";\nimport { RequestService } from \"./requestService\";\n\nexport class RequestClientAuth {\n    private baseUrl = process.env.REACT_APP_URL;\n    private headers: any = {\n        'Content-Type': 'application/json',\n        'X-XSRF-TOKEN': cookies(),\n        'X-Requested-With': 'XMLHttpRequest'\n    }\n\n    private requestService;\n\n    constructor() {\n        this.requestService = new RequestService();\n    }\n\n    async register(user: IUser): Promise<string | unknown> {\n        return this.requestService.post(\n            `/register`, \n            \"POST\", \n            this.headers,\n            user\n        );\n    }\n\n    async login(username: string, password: string): Promise<string> {\n        this.headers = {\n            ...this.headers, \n            'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\n        }\n\n        return this.requestService.get(\n            `/login`, \n            \"GET\", \n            this.headers\n        );\n    }\n\n    async logout(): Promise<String | unknown> {\n        return this.requestService.post(\n            `/logout`, \n            \"POST\", \n            this.headers\n        );\n    }\n}\n\n","import { FunctionComponent, useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UserContext } from \"../context/userContext\";\nimport { RequestClientAuth } from \"../helpers/auth/request\";\n\ninterface Props {\n    toggleShowLogin: (v: boolean) => void;\n}\nconst Login: FunctionComponent<Props> = ({ toggleShowLogin }) => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n    const [loginError, setLoginError] = useState<boolean>(false);\n    //@ts-ignore\n    const { user, setUser } = useContext(UserContext);\n    const requestAuth = new RequestClientAuth();\n\n    const handleNameChange = (e: any) => {\n        setUsername(e.target.value)\n    }\n\n    const handlePasswordChange = (e: any) => {\n        setPassword(e.target.value)\n    }\n\n    const handleSubmit = async (e: any) => {\n        e.preventDefault();\n\n        try {\n            const res = await requestAuth.login(username, password);\n\n            if(res !== \"false\") {\n                setUser({ authenticated: res });\n            } \n        } catch (e) {\n            console.log(e);\n            setLoginError(true);\n        }\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <h4>Login</h4>\n                    <div>\n                        <label htmlFor=\"name\"><strong>Name</strong></label>\n                    </div>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        onChange={(e) => handleNameChange(e)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"password\"><strong>Password</strong></label>\n                </div>\n                <input\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    onChange={(e) => handlePasswordChange(e)}\n                    required\n                />\n                <div>\n                    <input type=\"submit\" value=\"Login\" />\n                </div>\n                <small>{loginError && \"Incorrect username or password\"}</small>\n                <small className=\"register-login-link\">Don't have an account? <span onClick={() => toggleShowLogin(false)}>Register</span></small>\n            </form>\n        </div>\n    )\n}\n\nexport default Login;","import { FunctionComponent, useState } from \"react\";\nimport { RequestClientAuth } from \"../helpers/auth/request\";\nimport { IUser } from \"../interfaces/IUser\";\n\ninterface Props {\n    toggleShowLogin: (v: boolean) => void;\n}\n\nconst Register: FunctionComponent<Props> = ({ toggleShowLogin }) => {\n    const [username, setUsername] = useState<string>(\"\");\n    const [password, setPassword] = useState<string>(\"\");\n    const [registerError, setRegisterError] = useState<string>(\"\");\n    const request = new RequestClientAuth();\n\n    const handleNameChange = (e: any) => {\n        setUsername(e.target.value)\n    }\n\n    const handlePasswordChange = (e: any) => {\n        setPassword(e.target.value)\n    }\n\n    const handleSubmit = async (e: any) => {\n        e.preventDefault();\n\n        const body: IUser = {\n            username,\n            password\n        }\n\n        try {\n            const res = await request.register(body)\n            setRegisterError(\"User account created. Proceed to login.\");\n        } catch(e) {\n            console.log(e);\n            setRegisterError(\"Username already taken\");\n        }\n    }\n\n    const cookies = () => {\n        return document.cookie.split(\"XSRF-TOKEN=\")[1];\n      }\n    \n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <h4>Register</h4>\n                    <div>\n                        <label htmlFor=\"name\"><strong>Name</strong></label>\n                    </div>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        onChange={(e) => handleNameChange(e)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label htmlFor=\"password\"><strong>Password</strong></label>\n                </div>\n                <input\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    onChange={(e) => handlePasswordChange(e)}\n                    required\n                />\n                <div>\n                    <input type=\"submit\" value=\"Register\" />\n                </div>\n                <small>{registerError && registerError}</small>\n                <small className=\"register-login-link\">Already have an account? <span onClick={() => toggleShowLogin(true)}>Login</span></small>\n            </form>\n        </div>\n    )\n}\n\nexport default Register;","import React, { useContext, useEffect, useState } from 'react';\nimport { Task } from \"../interfaces/ITask\";\nimport { RequestClient } from '../helpers/request';\nimport TaskItem from '../components/taskItem';\nimport Form from '../components/form';\nimport { UserContext } from '../context/userContext';\nimport Login from './login';\nimport Register from './register';\nimport { RequestClientAuth } from '../helpers/auth/request';\n\nfunction Main() {\n\n    const [tasks, setTasks] = useState<Task[]>([]);\n    const [prioritySelected, setPriority] = useState<string>(\"\");\n    const [statusSelected, setStatus] = useState<string>(\"\");\n    const [showLogin, setShowLogin] = useState<boolean>(true);\n    const request = new RequestClient();\n    const requestAuth = new RequestClientAuth();\n    //@ts-ignore\n    const { user, setUser } = useContext(UserContext);\n\n    useEffect(() => {\n        const fetchRequest = async () => {\n            const tasks = await request.getAllTasks();\n            setTasks(tasks);\n        }\n\n        fetchRequest();\n    }, []);\n\n    const renderTasks = (task: Task, i: number) => {\n        return <TaskItem\n            key={i}\n            id={task.id as number}\n            name={task.name}\n            description={task.description}\n            priority={task.priority}\n            status={task.status}\n            createdAt={task.createdAt as string}\n            updateTasks={updateTasks}\n        />\n    }\n\n    const updateTasks = (tasks: Task[]) => {\n        setTasks(tasks);\n    }\n\n    const handleStatusChange = async (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setPriority(\"\");\n        setStatus(e.target.value);\n\n        if (!e.target.value) {\n            const tasks = await request.getAllTasks();\n            setTasks(tasks);\n            return;\n        }\n\n        const tasks = await request.filterByStatus(e.target.value);\n        updateTasks(tasks);\n    }\n\n    const handlePriorityChange = async (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setStatus(\"\");\n        setPriority(e.target.value);\n\n        if (!e.target.value) {\n            const tasks = await request.getAllTasks();\n            setTasks(tasks);\n            return;\n        }\n\n        const tasks = await request.filterByPriority(e.target.value);\n        updateTasks(tasks);\n    }\n\n    const toggleShowLogin = (val: boolean) => {\n        setShowLogin(val);\n    }\n\n    const showLoginForm = () => {\n        if (showLogin) {\n            return <Login\n                toggleShowLogin={toggleShowLogin}\n            />\n        } else {\n            return <Register\n                toggleShowLogin={toggleShowLogin}\n            />\n        }\n    }\n\n    const handleLogout = async () => {\n        await requestAuth.logout();\n        setUser({ authenticated: false })\n    }\n\n\n    const userAuthenticated = !user.authenticated ?\n        showLoginForm() :\n        (\n            <div className=\"form\">\n                <Form\n                    newTask={true}\n                    updateTasks={updateTasks}\n                />\n            </div>\n        );\n\n    const displayLogoutBtn = user.authenticated && (\n        <>\n            <span>Hello {user.authenticated}&nbsp;</span>\n            <button onClick={handleLogout}>Logout</button>\n        </>\n    )\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"col-left\">\n                    <div className=\"filters\">\n                        <div>\n                            <span>Count: {tasks.length}</span>\n                        </div>\n                        <div>\n                            <label htmlFor=\"priority\">Priority </label>\n                            <select\n                                name=\"priority\"\n                                id=\"priority\"\n                                onChange={(e) => handlePriorityChange(e)}\n                                value={prioritySelected}\n                            >\n                                <option value=\"\"></option>\n                                <option value=\"Low\">Low</option>\n                                <option value=\"Medium\">Medium</option>\n                                <option value=\"High\">High</option>\n                            </select>\n                        </div>\n                        <div>\n                            <label htmlFor=\"status\">Status </label>\n                            <select\n                                name=\"status\"\n                                id=\"status\"\n                                onChange={(e) => handleStatusChange(e)}\n                                value={statusSelected}\n                            >\n                                <option value=\"\"></option>\n                                <option value=\"Incomplete\">Incomplete</option>\n                                <option value=\"Active\">Active</option>\n                                <option value=\"Complete\">Complete</option>\n                            </select>\n                        </div>\n                    </div>\n                    <ul>\n                        {tasks.map((task, i) => renderTasks(task, i))}\n                    </ul>\n                </div>\n                <div className=\"col-right\">\n                    {displayLogoutBtn}\n                    {userAuthenticated}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Main;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Router } from \"react-router-dom\";\n\nimport Root from \"./components/main\";\n\nconst Routes = (\n    <Switch>\n        <Route exact path=\"/\" component={Root} />\n    </Switch>\n)\n\nexport default Routes;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport logo from './logo.svg';\nimport './styles/index.scss';\nimport Routes from './routes';\nimport { UserContext } from './context/userContext';\nimport cookies from './helpers/cookieParser';\n\nfunction App() {\n  useEffect(() => {\n    console.log('mount')\n    const fetchUser = async () => {\n      const res = await fetch('/user', {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-XSRF-TOKEN': cookies(),\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      });\n\n      const user = await res.text();\n\n      if (user !== \"anonymousUser\") {\n        setUser({ authenticated: true })\n      }\n\n    }\n\n    fetchUser();\n  }, [])\n  const [user, setUser] = useState({ authenticated: false });\n  const value = useMemo(() => ({ user, setUser }), [user, setUser]);\n\n  return (\n    <div className=\"App\">\n      {/* @ts-ignore */}\n      <UserContext.Provider value={value}>\n        {Routes}\n      </UserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from \"react-router-dom\";\nimport './index.css';\nimport { createBrowserHistory } from 'history';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={createBrowserHistory()}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}